*jupyter-vim.txt* Integrate your jupyter console process with vim!

A two-way integration between Vim and Jupyter [Qt]Console.

Using this plugin, send lines or files for the Jupyter kernel to execute.
Receive tracebacks for debugging.

Page: <https://github.com/jupyter-vim/jupyter-vim>
Authors:  Bernie Roesler <https://github.com/broesler>
          Marijn van Vliet <https://github.com/wmvanvliet>
          Martin Tourneboeuf <https://github.com/tinmarino>
Forked from: vim-ipython <https://github.com/ivanov/vim-ipython>
License: Distributed under the MIT license (see |jupyter-vim-license|)

This plugin is only available if 'compatible' is not set.

CONTENTS 					*jupyter-vim-contents*

	1. Introduction ......... |jupyter-vim-introduction|
	2. Usage ................ |jupyter-vim-usage|
	3. Mappings ............. |jupyter-vim-mappings|
	4. Configuration ........ |jupyter-vim-configuration|
	5. License .............. |jupyter-vim-license|
	6. Bugs ................. |jupyter-vim-bugs|
	7. Changelog ............ |jupyter-vim-changelog|
	8. Contributing ......... |jupyter-vim-contributing|
	9. Credits .............. |jupyter-vim-credits|

================================================================================
INTRODUCTION 					*jupyter-vim-introduction*

This plugin allows vim to interact directly with a Jupyter kernel. It provides
commands to connect to the kernel (or this can be done automatically whenever
you open a code file), and to send code directly from your buffer to the
kernel.

This plugin was originally forked from
[vim-ipython](<https://github.com/ivanov/vim-ipython>), but has been
updated substantially to stay up-to-date with the most recent versions of the
jupyter console. For a more complete list of changes, see
|jupyter-vim-vs-vim-ipython|.

--------------------------------------------------------------------------------
USAGE 						*jupyter-vim-usage*

This plugin is intended to be used with side-by-side terminals, or with
a multiplexer such as `tmux`. The idea is to edit your python script in vim,
and be able to send commands to Jupyter, which is running in the other
terminal. No more copy/alt-tab/paste!

To begin:
	$ jupyter qtconsole &  # open a jupyter console window
	$ vim <your_script>.py
	:JupyterConnect

The |:JupyterConnect| command attempts to connect to the Jupyter kernel; by
default it guesses the language of the kernel based on the filetype (see
|b:jupyter_kernel_type|).  For example, running the command |:JupyterConnect|
while in a *.py buffer will attempt a connection to a Python Jupyter kernel,
whereas in a *.jl buffer it will attempt to connect to a Julia Jupyter kernel.

When Vim is connected to the Jupyter kernel, code can be send over through
various means. For example, making a visual selection and executing
:JupyterSendRange (by default mapped to <localleader>e), or executing
:JupyterSendFile to execute everything in the buffer. A MATLAB-like cell mode
is also supported (see |:JupyterSendCell|).

When the Vimspector (https://github.com/puremourning/vimspector) plugin is also
installed, the :JupyterStartDebugger command (by default mapped to
<localleader>d) can be used to attach the debugger to the running kernel.

--------------------------------------------------------------------------------
COMMANDS 					*jupyter-vim-commands*

:JupyterConnect [connection_file]	    *jupyter-connect* *:JupyterConnect*
			Connect to an existing `jupyter kernel`. Kernel may be
			any type (not just IPython). Connection attempt will
			timeout after five seconds, and give a warning. Other
			functionality of the plugin will not be available unless
			connected to a kernel.

			This command assumes the language of the Jupyter kernel
			is |b:jupyter_kernel_type|; errors may occur if the
			kernel type is incorrect.

			An optional [connection_file] can be given. It must
			match the name or the id of the kernel connection
			file given by `ipython kernel -f connection_file`,
			by default it looks like `kernel-13423.json`.

			To see connection information press |g<|

			Note this command is running in an other thread

			Note that a `jupyter console` need not be running to
			connect to a `jupyter kernel`, but the console is
			necessary to display any output from your python code!

:JupyterDisconnect			*jupyter-disconnect* *:JupyterDiconnect*
			Diconnect from the currently connected kernel.

:JupyterStartMonitor		*jupyter-start-monitor* *:JupyterStartMonitor*
			Start a monitor window that echos all traffic coming
			from the kernel channels. This is useful for debugging
			the connection to the kernel.

:JupyterStopMonitor		*jupyter-stop-monitor* *:JupyterStopMonitor*
			Stop monitoring the traffic coming from the kernel
			channels and close the monitoring window.

:JupyterCd [dir] 				*jupyter-cd* *:JupyterCd*
			Change the working directory of the kernel to [dir].
                        Functions just like the typical shell command.
			Some special path can be given:
			  ""  -> $HOME directory.
			  "-" -> Previous working directory (works in most
			  shells)
			  "%" -> Current file directory
			After that, the path given will be expanded. See
			|expand()|

:JupyterRunFile [flags] [filename] 	    *jupyter-runfile* *:JupyterRunFile*
			Run an entire file. The [flags] argument only affects
			Python kernels. If [flags] and [filename] are empty,
			the filename of the current buffer is used. The
			[filename] is taken as the last argument to the
			command.

			For Python kernels, this command uses the IPython
			"%run" magic (with __name__ == "__main__").  Execute
			"%run?" in an IPython console to read the documentation
			about the "%run" magic.

			Global IPython flags may also be set via
			|g:ipython_run_flags|.  These flags will be applied to
			any call without flags:
				:JupyterRunFile my_script.py

			Inclusion of [flags] will override the global flags.
			For example, to run the current buffer in the
			interactive IPython environment:
				:JupyterRunFile -i %:p

:JupyterSendCode {code}			*jupyter-sendcode* *:JupyterSendCode*
			Send a raw line of code to the jupyter kernel.

:[count]JupyterSendCount               	*jupyter-sendcount* *:JupyterSendCount*
			Send [count] lines to the kernel. If [count] is not
			given, the current line is sent.
			
:[range]JupyterSendRange               	*jupyter-sendrange* *:JupyterSendRange*
			Send the [range] of lines to the kernel. If [range] is
			not given, the current line is sent.

:JupyterSendCell                	*jupyter-sendcell* *:JupyterSendCell*
			Send the current code cell, as delineated by the lines
			matching |g:jupyter_cell_separators|

JupyterTerminateKernel [signal]        *jupyter-terminatekernel* *:JupyterTerminateKernel*
			Send [signal] to the connected kernel. [signal] is by
			default SIGTERM (15). It can be a python signal
			constant or an integer.

--------------------------------------------------------------------------------
PYTHON SPECIFIC COMMANDS 			*jupyter-python-commands*

Jupyter-vim has some commands specifically aimed at the IPython kernel.

:PythonSetBreak 			*python-setbreak* *:PythonSetBreak*
			Set a pdb debugging stop at the current line by
			inserting:
				import pdb; pdb.set_trace()
			into the python file. You will need to hop over to the
			jupyter [qt]console to operate pdb.

:PythonImportThisFile 	    *jupyter-importthisfile* *:PythonImportThisFile*
			Imports the current buffer as a python module. The
			following command is send to the ipython kernel:
				:JupyterRunFile -n %:p
			The IPython "%run" magic handles stripping the
			extension and running the `import` command.

:PythonStartDebugger		*jupyter-start-debugger* *:PythonStartDebugger*
			Start a Vimspector debug session and attach it to the kernel we are
			currently connected to. Needs the Vimspector plugin installed to
			work: https://github.com/puremourning/vimspector.

--------------------------------------------------------------------------------
MAPPINGS					*jupyter-vim-mappings*

<localleader>R 		Run the current file (see |:JupyterRunFile|).
<localleader>I 		Import the current file (see |:PythonImportThisFile|).
<localleader>d 		Change to the directory of the current file (see |:JupyterCd|).
<localleader>X 		Execute the current cell (see |:JupyterSendCell|).
<localleader>E 		Execute the current line (see |:JupyterSendRange|).

<localleader>e 		Execute vim text |objects|
{Visual}<localleader>e  Execute the |visual| selection

<localleader>d 		Attach the Vimspector debugger (see |:PythonStartDebugger).

--------------------------------------------------------------------------------
CONFIGURATION					*jupyter-vim-configuration*

`b:jupyter_kernel_type`                             *b:jupyter_kernel_type*
Default: inferred from filetype                     Language of the kernel

Buffer-local variable that indicates what language vim will assume the Jupyter
kernel accepts. By default, this value is inferred from the filetype of the
buffer, according to the mapping:
+--------------------+-----------------+
| Filetype           | Kernel language |
+--------------------+-----------------+
| sh                 | 'bash'          |
| c                  | 'cpp'           |
| cpp                | 'cpp'           |
| java               | 'java'          |
| javascript         | 'javascript'    |
| julia              | 'julia'         |
| perl               | 'perl'          |
| python             | 'python'        |
| r                  | 'ir'            |
| raku               | 'raku'          |
| perl6              | 'raku'          |
| ruby               | 'ruby'          |
| rust               | 'rust'          |
| <everything else>  | 'none'          |
+--------------------+-----------------+

`b:ipython_run_flags` 			            *b:ipython_run_flags*
Default: '' 				Flags for "%run" IPython magic

Buffer-local variable to append [flags] to the |:JupyterRunFile| command for
that buffer. Typical flags include "-i" to run the file in the current IPython
kernel namespace, or "-d" to start the `pdb` debugger at the first line of the
file.

See:
<http://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-run>
or type "%run?" in the `jupyter [qt]console` for more information.

`g:jupyter_auto_connect`   			*g:jupyter_auto_connect*
Default: 0 				Automatically connect to kernel

This setting determines if vim will automatically run |:JupyterConnect| for any
code file whose filetype is associated with a kernel language (other than
'none') as described in |b:jupyter_kernel_type|. Due to the nature of the
connection process, vim will be slow to start up if this option is set to 1. An
asynchronous connection process is a work in progress.

`b:jupyter_exec_*`     		*b:jupyter_exec_before* *b:jupyter_exec_pre*
				  *b:jupyter_exec_post* *b:jupyter_exec_after*
Default: ''

Example: `autocmd FileType python let b:jupyter_exec_before = 'clear-screen'`
These variables if exist, will send another execute_request before, after each
user message or be preprended, appended to each message.

`g:jupyter_cell_separators`        		*g:jupyter_cell_separators*
				  List of regex to separate jupyter cells
Default: ['##', '#%%', '# %%', '# <codecell>']

Define how jupyter-vim will find the current cell when running
|:JupyterSendCell|.
Example: `let g:jupyter_cell_separators = ['.*separator-placeholder']` will
consider a cell every lines between two lines containing separator-placeholder
string.
The match starts at the beginning of line: hence the `.*` in the previous
example

`g:jupyter_highlight_cells`        		*g:jupyter_highlight_cells
				  Boolean to toggle cell highlighting 
Default: 1

This option will use syntax highlighting in order to highlight the cells
defined by g:jupyter_cell_separators if set to true. 

`g:jupyter_mapkeys`   					*g:jupyter_mapkeys*
Default: 1 					Map keys for python files

By default, jupyter-vim will map the keys, as described in
|jupyter-vim-mappings|. Set to 0 to create your own mappings in your vimrc.

--------------------------------------------------------------------------------
JUPYTER-VIM VS. VIM-IPYTHON 			*jupyter-vim-vs-vim-ipython*

Major changes include:
	- jupyter-vim works with both Python and other kernels, and is
	  restructured so that even more languages can be added in the future (no
	  Python-specific stuff baked in).
	- jupyter-vim works with vimspector to provide advanced debugging
	  capabilities.
	- The pseudo-terminal vim pane functionality has been repurposed as a debug
	  channel only, since jupyter-qtconsole has the configuration option:
		c.ConsoleWidget.include_other_output = True
	  and jupyter-console has:
		c.ZMQTerminalInteractiveShell.include_other_output = True
	  which allow the console to echo the commands sent by vim (or any
	  other client), as well as the output of the commands. There is no
	  need to replicate this functionality within vim.
	- The original python documentation look-up and completion code has
	  been removed. Instead, use [jedi-vim](<link_here>).
	- Many of the original <Plug> mappings have been replaced with vim
	  commands, so they may be used without a user mapping.
	- Default keymaps now use <localleader>.
	- A general `plugin` was created (in addition to the `ftplugin`), so
	  that jupyter-vim could be expanded to work with any filetype for which
	  a `jupyter kernel` exists.

================================================================================
LICENSE 					*jupyter-vim-license*

MIT License

Copyright (c) 2018-present Bernard Roesler

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

--------------------------------------------------------------------------------
BUGS 						*jupyter-vim-bugs*

Known issues will be reported here.

This version of jupyter-vim has been tested on the following:
$ ipython --version           # 6.1.0
$ jupyter --version           # 4.3.0
$ jupyter console --version   # 5.2.0
$ jupyter qtconsole --version # 4.3.1

--------------------------------------------------------------------------------
CHANGELOG					*jupyter-vim-changelog*

[v0.0?]
* Added support for debugging with Vimspector
* Feature: Do not ignore Indented when using JupyterSendCell (Issue #47)
* Restore support for custom cell with g:jupyter_cell_separators
* Refactor command names `:J*` -> `:Jupyter*`. Retrocompatibility.
* Refactor command names `:Jupyter*` -> `:J*`. Nobody likes typing.
* Add `b:jupyter_exec_before` and its 3 brothers
* Refactor interface: one object <- one global
	`:py3 print(_jupyter_session.client.check_connection())`
* Kernel support: `R`, `Rust`, `Raku`
* Repurposed the monitor window for debugging only, since both
  jupyter-qtconsole and jupyter-console support asynchroneous display of
  output.

[v0.01]
* Kernel support: `Bash`, `Cpp`, `Java`, `Javascript`, `Perl`, `Ruby`
	`Rust`, `Raku`
* Asynchronous `:JupyterConnect`
* Refactor interface: one global to rule them all
	`:py3 print(jupyter_vim.SI.client.check_connection())`
* `:JupyterConnect` -> autocompletion
* `:JupyterCd` -> echo cwd
* Parse message more tolerantly and resiliently
* Add github wiki

[v0.00]
* Kernel support: `Python`, `Julia`
* Add Readme.md
* Migration at: https://github.com/jupyter-vim/jupyter-vim

--------------------------------------------------------------------------------
CONTRIBUTING					*jupyter-vim-contributing*

Please feel free to contact us at:
	bernard.roesler@gmail.com, w.m.vanvliet@gmail.com, tinmarino@gmail.com
with the subject line
	"[jupyter-vim]: Contributing".

--------------------------------------------------------------------------------
CREDITS 					*jupyter-vim-credits*
We owe significant thanks to the original developer of this plugin: Paul Ivanov
<https://github.com/ivanov>. It is far easier to update something that already
works well than to forge a new path from scratch.

vim:tw=78:ts=8:noet:ft=help:norl:
